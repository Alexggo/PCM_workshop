?gridMetrics
R.version
require(ape)
require(phytools)
?plotTree
?plot.phylo
setwd('Downloads')
require(phytools)
require(nlme)
primte_tree <- read.tree('~/Downloads/primateEyes.phy')
primate_tree <- read.tree('~/Downloads/primateEyes.phy')
primate_tree
plotTree(primate_tree, ftype = 'i', fsize = 0.6)
primate_data <- read.csv('~/Downloads/primateEyes.csv', row.names = 1, stringsAsFactors = TRUE)
head(primate_data)
str(primate_data)
primate_data[, 'Orbit_area']
pic(orbit_area, primate_tree)
orbit_area <- primate_data[, 'Orbit_area']
pic(orbit_area, primate_tree)
names(orbit_area) <-rownames(primate_data)
pic(orbit_area, primate_tree)
?pic
pic.orbit_area <- pic(log(orbit_area), primate_tree)
skull length <- setNames(primate_data$skull_length, rownames(primate_data))
skull_length <- setNames(primate_data$skull_length, rownames(primate_data))
rownames(primate_data)
primate_data$skull_length
head(primate_data)
skull_length <- setNames(primate_data$Skull_length, rownames(primate_data))
pic.skull <- pic(log(skull_length), primate_tree)
pic_primate <- lm(pic.orbit_area ~ pic.skull)
pic_primate <- lm(pic.orbit_area ~ pic.skull + 0)
anova(pic_primate)
summaryt(pic_primate)
summary(pic_primate)
plot(pic.orbit_area ~ pic.skull)
plot(pic.orbit_area ~ pic.skull, xlab = 'PIC log skull length', ylab = 'PIC log orbit area')
plot(pic.orbit_area ~ pic.skull, xlab = 'PIC log skull length', ylab = 'PIC log orbit area', bty = 'n', las = 1)
grid()
abline(pic_primate)
corBM <- corBrownian(phy = primate_tree, form = ~spp)
corBM
head(primate_data)
pgls_primate <- gls(log(Orbit_area) ~ log(Skull_length), data = primate_data, correlation = corBM)
corBM <- corBrownian(phy = primate_tree, form = ~ spp)
pgls_primate <- gls(log(Orbit_area) ~ log(Skull_length), data = primate_data, correlation = corBM)
spp <- rownames(primate_data)
corBM <- corBrownian(phy = primate_tree, form = ~ spp)
pgls_primate <- gls(log(Orbit_area) ~ log(Skull_length), data = primate_data, correlation = corBM)
pgls_primate
coef(pic_primate)
coef(pgls_primate)
summary(pgls_primate)
primate_ancova <- gls(log(Orbit_area) ~ log(Skull_length) + Activity_pattern, data = primate_data, correlation = corBM)
anova(primate_ancova)
primate_ancova <- gls(log(Orbit_area) ~ log(Skull_length) + Activity_pattern, data = primate_data, correlation = corBM)#
#
anova(primate_ancova)
primate_ancova <- gls(log(Orbit_area) ~ log(Skull_length) * Activity_pattern, data = primate_data, correlation = corBM)
anova(primate_ancova)
primate_ancova <- gls(log(Orbit_area) ~ log(Skull_length) + Activity_pattern, data = primate_data, correlation = corBM)#
#
anova(primate_ancova)
summary(primate_ancova)
anolis_data
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)
anolis_tree <- read.tree('~/Downloads/Anolis.tre')
anolis_data
commonsp <- intersect(rownames(anolis_data), anolis_tree$tip.label)
commonsp
anolis_tree <- keep.tip(anolis_tree, commonsp)
anolis_data <- anolis_data[anolis_tree$tip.label,]
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1)
eco
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')
eco[anolis_tree$tip.label,, drop = FALSE]
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- intersect(rownames(anolis_data), anolis_tree$tip.label)#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])
anolis_data
corBM <- corBrownian(phy = anolis_tree, form = ~ rownames(anolis_data))
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
anolis_data
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1, stringsAsFactors = TRUE)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- intersect(rownames(anolis_data), anolis_tree$tip.label)#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])#
#
corBM <- corBrownian(phy = anolis_tree, form = ~ rownames(anolis_data))#
#
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1, stringsAsFactors = TRUE)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- intersect(rownames(anolis_data), anolis_tree$tip.label)#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])
str(anolis_data)
anolis_tree
corBM
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data)
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_datahead(anolis_data))
head(anolis_data)
spp <- rownames(anolis_data)
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
commonsp <- Reduce(rownames(anolis_data), anolis_tree$tip.label, rownames(eco))
commonsp <- Reduce(intersect, list(rownames(anolis_data), anolis_tree$tip.label, rownames(eco)))
commonsp
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1, stringsAsFactors = TRUE)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- Reduce(intersect, list(rownames(anolis_data), anolis_tree$tip.label, rownames(eco)))#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])
spp <- rownames(anolis_data)
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)
gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
corOU <- corMartins(phy = anolis_tree, form = ~ spp)
? corMartins
?gls
corOU <- corMartins(1, phy = anolis_tree, form = ~ spp)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitBM)
fitBM <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)#
#
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)#
#
summary(fitBM)
summary(fitOU)
AIC(fitBM, fitOU)
summary(fitOU)
corOU <- corMartins(10, phy = anolis_tree, form = ~ spp)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitOU)
corOU <- corMartins(100, phy = anolis_tree, form = ~ spp)
corOU <- corMartins(1000, phy = anolis_tree, form = ~ spp)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitOU)
corOU <- corMartins(0, phy = anolis_tree, form = ~ spp)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitOU)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitOU)
corOU <- corMartins(0.1, phy = anolis_tree, form = ~ spp)
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)
summary(fitOU)
summary(fitBM)
? corBrownian
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)
corBM <- corBrownian(phy = anolis_tree, form = ~1)
fitBM <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)
summary(fitBM)
spp <- rownames(anolis_data)#
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)#
corOU <- corMartins(1, phy = anolis_tree, form = ~ spp)
fitBM <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corBM)#
#
fitOU <- gls(log(SVL) ~ log(FLL) + ecomorph, data = anolis_data, correlation = corOU)#
#
summary(fitBM)#
summary(fitOU)
summary(fitOU)
AIC(fitBM, fitOU)
fitBM <- gls(log(FLL) ~ log(SVL) + ecomorph, data = anolis_data, correlation = corBM)#
#
fitOU <- gls(log(FLL) ~ log(SVL) + ecomorph, data = anolis_data, correlation = corOU)#
#
summary(fitBM)#
summary(fitOU)
AIC(fitBM, fitOU)
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1, stringsAsFactors = TRUE)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- Reduce(intersect, list(rownames(anolis_data), anolis_tree$tip.label, rownames(eco)))#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])#
#
spp <- rownames(anolis_data)#
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)#
corOU <- corMartins(1, phy = anolis_tree, form = ~ spp)#
#
fitBM <- gls(log(FLL) ~ log(SVL) + ecomorph, data = anolis_data, correlation = corBM)#
#
fitOU <- gls(log(FLL) ~ log(SVL) + ecomorph, data = anolis_data, correlation = corOU)#
#
summary(fitBM)#
summary(fitOU)
anolis_data
anolis_data <- read.csv('~/Downloads/anole.data.csv', row.names = 1)#
eco <- read.csv('~/Downloads/ecomorph.csv', row.names = 1, stringsAsFactors = TRUE)#
anolis_tree <- read.tree('~/Downloads/Anolis.tre')#
#
commonsp <- Reduce(intersect, list(rownames(anolis_data), anolis_tree$tip.label, rownames(eco)))#
#
anolis_tree <- keep.tip(anolis_tree, commonsp)#
anolis_data <- anolis_data[anolis_tree$tip.label,]#
anolis_data <- cbind(anolis_data, ecomorph = eco[anolis_tree$tip.label,, drop = FALSE])#
#
spp <- rownames(anolis_data)#
corBM <- corBrownian(phy = anolis_tree, form = ~ spp)#
corOU <- corMartins(1, phy = anolis_tree, form = ~ spp)#
#
fitBM <- gls(FLL ~ SVL + ecomorph, data = anolis_data, correlation = corBM)#
#
fitOU <- gls(FLL ~ SVL + ecomorph, data = anolis_data, correlation = corOU)#
#
summary(fitBM)#
summary(fitOU)
AIC(fitBM, fitOU)
?name.check
?geiger::name.check
help(package='phylolm')
require(phylolm)
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, model = 'OUrandomRoot')
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'OUrandomRoot')
summary(fit3)
summary(fitOU)
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'OUfixedRoot')
summary(fit3)
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'OUrandomRoot')
summary(fit3)
fit2 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'BM')
summary(fit2)
summary(fitBM)
summary(fit2)
? phylolm
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'OUfixedRoot')
summary(fit3)
summary(fitOU)
summary(fitBM)
summary(fit2)
?gls
fitOU <- gls(FLL ~ SVL + ecomorph, data = anolis_data, correlation = corOU, method = 'ML')
summary(fitOU)
fit3 <- phylolm(FLL ~ SVL + ecomorph, data = anolis_data, phy = anolis_tree, model = 'OUrandomRoot')
summary(fit3)
primate_tree <- read.tree('~/Downloads/primateEyes.phy')
primate_data <- read.csv('~/Downloads/primateEyes.csv', row.names = 1, stringsAsFactors = TRUE)
log.skull_length <- setNames(log(primate_data$Skull_length), rownames(primate_data))
log.skull_length
phylosig(primate_tree, log.skull_length, method = 'K')
phylosig(primate_tree, log.skull_length, method = 'K', test = TRUE)
? phylosig
simX <- fastBM(primate_tree, nsim = 1000)
simX
simK <- apply(simX, 2, \(x) phylosig(primate_tree, x))
simK
mean(simK)
phylosig(primate_tree, log.skull_length, method = 'K', test = TRUE)
sum(simK > 1.35302)
sum(simK > 1.35302) * 2 / 1000
primate_lambda <- phylosig(primate_tree, log.skull_length, method = 'lambda', test = TRUE)
primate_lambda
data(eel.tree)
data(eel.data)
lnTL <- setNames(log(eel.data$Max_TL_cm), rownames(eel.data))
lnTL
eel_K <- phylosig(eel.tree, lnTL, test = TRUE)
eel_K
eel_cMap <- contMap(eel.tree, lnTL, plot = FALSE)
primate_cMap <- contMap(primate_tree, log.skull_length, plot = FALSE)#
eel_cMap <- contMap(eel.tree, lnTL, plot = FALSE)
plot(eel_cMap)
primate_cMap <- setMap(primate_cMap, viridisLite::viridis(n=10))
plot(primate_cMap)
par(mfrow = c(1,2))#
plot(primate_cMap, fsize = c(0.4, 0.9), outline = FALSE, lwd = 2)#
plot(eel_cMap, fsize = c(0.4, 0.9), outline = FALSE, lwd = 2)
setwd('~/Downloads/epmModule_jan2024')#
#
# install the following packages for added speed-ups#
# install.packages(c('exactextractr', 'tmap', 'data.table', 'spdep'))#
#
library(epm)#
library(sf)#
library(ape)#
library(rnaturalearth)
setwd('~/Dropbox/epmModule/epmModule_jan2024')
library(epm)#
library(sf)#
library(ape)#
library(rnaturalearth)
# filename and location of IUCN mammals shapefile#
IUCNfile <- "sciuridIUCN.rds"#
#
# load the shapefile as a simple features object#
mammals <- readRDS(IUCNfile)#
#
mammals
# get a land mass vector dataset#
land <- ne_download(scale = 50, type = 'land', category = 'physical')#
#
# Identify the species of interest#
allsp <- unique(mammals$binomial)#
squirrelSp <- grep("Spermophilus\\s|Citellus\\s|Tamias\\s|Sciurus\\s|Glaucomys\\s|Marmota\\s|Cynomys\\s", allsp, value = TRUE, ignore.case = TRUE)#
head(squirrelSp)
spList <- vector('list', length(squirrelSp))#
names(spList) <- squirrelSp#
#
for (i in 1:length(squirrelSp)) {#
    ind <- which(mammals$binomial == squirrelSp[i])#
    spList[[i]] <- mammals[ind,]#
}#
#
# We will want to work in an equal area projection. This is the North America Albers Equal Area Projection.#
EAproj <- '+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs'#
#
# Let's now transform each range polygon to this projection. #
spListEA <- lapply(spList, function(x) st_transform(x, crs = EAproj))
# We need to make some adjustments to account for synonymy issues.#
#
names(spList) <- gsub('Neotamias', 'Tamias', names(spList))#
names(spListEA) <- gsub('Neotamias', 'Tamias', names(spListEA))#
#
# Replace all spaces with underscores (not strictly necessary, but this will match the phylogenetic data later on)#
#
names(spList) <- gsub('\\s+', '_', names(spList))#
names(spListEA) <- gsub('\\s+', '_', names(spListEA))
treefile <- 'Upham_mammals_allExtant_mcctree.tre'#
#
# This is a newick file, so I will read in with read.tree#
mammaltree <- read.tree(treefile)#
mammaltree#
#
# This tree has family and order attached to the tip labels. This is useful information, but will cause problems. The pattern is Genus_species_FAMILY_ORDER#
#
# We will use the strsplit() function to split each tip label into pieces, where the splits will happen wherever there are underscores.#
# Here is an example#
strsplit(mammaltree$tip.label[1], '_')#
#
newLabels <- character(Ntip(mammaltree))#
for (i in 1:Ntip(mammaltree)) {#
	tmp <- strsplit(mammaltree$tip.label[i], '_')[[1]]#
	newLabels[i] <- paste0(tmp[1], '_', tmp[2])#
}#
#
# more complicated, but we could have done this with regular expression#
gsub('(\\w+)_(\\w+)_(\\w+)_(\\w+)', '\\1_\\2', mammaltree$tip.label[1], ignore.case = TRUE)
mammaltree$tip.label <- newLabels#
mammaltree#
#
length(intersect(names(spListEA), mammaltree$tip.label))
# 3. Morphological data#
#
traits <- read.csv('squirrelShapeData.csv', stringsAsFactors = FALSE, row.names = 1, header = FALSE)#
traits[1:5, 1:5]#
#
dim(traits)#
#
length(intersect(names(spListEA), rownames(traits)))#
#
# How many taxa are shared across the 3 sets?#
length(Reduce(intersect, list(names(spListEA), mammaltree$tip.label, rownames(traits))))
squirrelEPM <- createEPMgrid(spListEA, resolution = 50000, method = 'percentOverlap', cellType = 'hexagon', retainSmallRanges = TRUE)
plot(squirrelEPM)
squirrelEPM <- createEPMgrid(spListEA, resolution = 50000, method = 'percentOverlap', cellType = 'square', retainSmallRanges = TRUE)
plot(squirrelEPM)
extentPoly <- interactiveExtent(spListEA)
extentPoly
landEA <- st_transform(land, crs = st_crs(spListEA[[1]]))#
#
plot(st_geometry(landEA), lwd = 0.5)#
plot(extentPoly[[1]], add = TRUE, border = 'red')
plot(extentPoly[[1]], add = TRUE, border = 'red', lwd = 3)
squirrelEPM <- createEPMgrid(spListEA, resolution = 50000, method = 'percentOverlap', cellType = 'hexagon', retainSmallRanges = TRUE, extent = extentPoly[[1]]) # took me < 1 minute#
#
squareEPM <- createEPMgrid(spListEA, resolution = 50000, method = 'percentOverlap', cellType = 'square', retainSmallRanges = TRUE, extent = extentPoly[[1]]) # took me ~ 15 seconds
squirrelEPM
plotSpRange(squirrelEPM, taxon = 'Tamias_dorsalis', use_tmap = FALSE)
#######################################
## ADD PHYLO AND TRAIT DATA#
#
squirrelEPM <- addPhylo(squirrelEPM, mammaltree)#
squirrelEPM <- addTraits(squirrelEPM, data = traits)#
#
squirrelEPM
library(viridis)
plot(squirrelEPM)
plot(squirrelEPM, col = plasma)
plot(squirrelEPM, col = c('midnight blue', 'blue', 'light blue', 'violet'))
plot(squirrelEPM, basemap = 'interactive', alpha = 0.5)
identify(squirrelEPM)
# a multivariate shape metric#
disp <- gridMetrics(squirrelEPM, metric = 'disparity')#
disp#
plot(disp, col = turbo)
# minimum nearest neighbor distance#
minNN <- gridMetrics(squirrelEPM, metric = 'min_NN_dist')#
plot(minNN, lwd = 0.1, border = gray(0.9))#
# a univariate trait (we will pretend we have a non-shape data table, and calculate the mean of the first column)#
meanCol1 <- gridMetrics(squirrelEPM, metric = 'mean', column = 1)#
plot(meanCol1)
# phylo disparity#
phyloDisp <- gridMetrics(squirrelEPM, metric = 'phyloDisparity')#
plot(phyloDisp, lwd = 0.1, border = gray(0.9))#
plot(phyloDisp, lwd = 0.01, borderCol = 'white')#
#
# range weighted metric#
phyloWE <- gridMetrics(squirrelEPM, metric = 'phyloWeightedEndemism')#
plot(phyloWE, lwd = 0.1)#
plot(phyloWE, log = TRUE, lwd = 0.1)
phylobeta <- betadiv_phylogenetic(squirrelEPM, radius = 100000, component = 'full')#
plot(phylobeta, pal = viridis, lwd = 0.15)#
#
disparityBeta <- betadiv_disparity(squirrelEPM, radius = 100000)#
plot(disparityBeta, pal = viridis, lwd = 0.15)
pts <- rbind.data.frame(#
    c(-120.5, 38.82),#
    c(-84.02, 42.75),#
    c(-117.95, 55.53))#
colnames(pts) <- c('x', 'y')#
ptsSF <- st_as_sf(pts, coords = 1:2, crs = "epsg:4326")#
pts <- st_coordinates(st_transform(ptsSF, crs = EAproj))
epmToPhyloComm(squirrelEPM, sites = pts)
# for getting the species that are found at particular coordinates#
extractFromEpmGrid(squirrelEPM, pts)#
extractFromEpmGrid(squirrelEPM, pts, collapse = FALSE)
# if you have a raster, and you would like to resample it to a hexagonal grid#
library(terra)#
topoFile <- 'roughness_10KMmd_GMTEDmd.tif'#
#
topo <- rast(topoFile)#
landRast <- rasterize(vect(land), topo)#
topo <- terra::mask(topo, mask = landRast)
e <- st_transform(st_make_grid(squirrelEPM[[1]], n = 1), crs = 4326)#
e <- st_bbox(e)[c('xmin', 'xmax', 'ymin', 'ymax')]#
topoCrop <- crop(topo, e)#
topoCrop <- project(topoCrop, EAproj)
plot(topoCrop)
topoCrop <- aggregate(topoCrop, 4)#
#
topoHex <- rasterToGrid(topoCrop, squirrelEPM)#
#
plot(topoCrop, col = viridis(100))
plot(topoHex, pal = viridis, lwd = 0.25)
cellDF <- tableFromEpmGrid(squirrelEPM, disp, minNN, topoHex, n = 1000)#
#
head(cellDF)
# Where are these points?#
plot(squirrelEPM, use_tmap = FALSE)#
points(cellDF[, c('x', 'y')], pch = 3)
plot(cellDF$disp ~ cellDF$squirrelEPM)
plot(cellDF$squirrelEPM ~ cellDF$disp)
plot(cellDF$disp ~ cellDF$squirrelEPM)
ncol(squirrelEPM[['data']])
disp <- gridMetrics(squirrelEPM, metric = 'disparity', column = 2:ncol(squirrelEPM[['data']]))
disp
plot(disp, col = turbo)
minNN <- gridMetrics(squirrelEPM, metric = 'min_NN_dist', column = 2:ncol(squirrelEPM[['data']]))
cellDF <- tableFromEpmGrid(squirrelEPM, disp, minNN, topoHex, n = 1000)
head(cellDF)
plot(cellDF$disp ~ cellDF$squirrelEPM)
plot(cellDF$minNN ~ cellDF$squirrelEPM)
plot(cellDF$minNN ~ cellDF$topoHex)
